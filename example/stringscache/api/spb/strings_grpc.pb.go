// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: strings.proto

package spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringsServiceClient is the client API for StringsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringsServiceClient interface {
	Reverse(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ReverseStream(ctx context.Context, opts ...grpc.CallOption) (StringsService_ReverseStreamClient, error)
}

type stringsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringsServiceClient(cc grpc.ClientConnInterface) StringsServiceClient {
	return &stringsServiceClient{cc}
}

func (c *stringsServiceClient) Reverse(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/spb.StringsService/Reverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringsServiceClient) ReverseStream(ctx context.Context, opts ...grpc.CallOption) (StringsService_ReverseStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StringsService_ServiceDesc.Streams[0], "/spb.StringsService/ReverseStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stringsServiceReverseStreamClient{stream}
	return x, nil
}

type StringsService_ReverseStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type stringsServiceReverseStreamClient struct {
	grpc.ClientStream
}

func (x *stringsServiceReverseStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stringsServiceReverseStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringsServiceServer is the server API for StringsService service.
// All implementations must embed UnimplementedStringsServiceServer
// for forward compatibility
type StringsServiceServer interface {
	Reverse(context.Context, *Message) (*Message, error)
	ReverseStream(StringsService_ReverseStreamServer) error
	mustEmbedUnimplementedStringsServiceServer()
}

// UnimplementedStringsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStringsServiceServer struct {
}

func (UnimplementedStringsServiceServer) Reverse(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reverse not implemented")
}
func (UnimplementedStringsServiceServer) ReverseStream(StringsService_ReverseStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseStream not implemented")
}
func (UnimplementedStringsServiceServer) mustEmbedUnimplementedStringsServiceServer() {}

// UnsafeStringsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringsServiceServer will
// result in compilation errors.
type UnsafeStringsServiceServer interface {
	mustEmbedUnimplementedStringsServiceServer()
}

func RegisterStringsServiceServer(s grpc.ServiceRegistrar, srv StringsServiceServer) {
	s.RegisterService(&StringsService_ServiceDesc, srv)
}

func _StringsService_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringsServiceServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spb.StringsService/Reverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringsServiceServer).Reverse(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringsService_ReverseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringsServiceServer).ReverseStream(&stringsServiceReverseStreamServer{stream})
}

type StringsService_ReverseStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type stringsServiceReverseStreamServer struct {
	grpc.ServerStream
}

func (x *stringsServiceReverseStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stringsServiceReverseStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringsService_ServiceDesc is the grpc.ServiceDesc for StringsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spb.StringsService",
	HandlerType: (*StringsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reverse",
			Handler:    _StringsService_Reverse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReverseStream",
			Handler:       _StringsService_ReverseStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strings.proto",
}
